# In this SQL code, I am working with multiple tables in MySQL.

/*Write SQL queries that demonstrate the necessity of using sub-queries.
Compose sub-queries in the where clause.
Build Column Expressions (i.e., sub-query in place of a column)
Write Table Expressions (i.e., sub-query in place of a table)*/

-- Execute a failing query (i.e. one which gives an error) to retrieve all employees records whose salary is lower than the average salary

SELECT
    *
FROM
    EMPLOYEES
WHERE
    salary < AVG(salary);

-- Execute a working query using a sub-select to retrieve all employees records whose salary is lower than the average salary

SELECT
    EMP_ID,
    F_NAME,
    L_NAME,
    SALARY
FROM
    EMPLOYEES
WHERE
    SALARY <(
    SELECT
        AVG(SALARY)
    FROM
        EMPLOYEES
);

-- Execute a failing query (i.e. one which gives an error) to retrieve all employees records with EMPID, SALARY and maximum salary as MAXSALARY in every row

SELECT
    EMP_ID,
    SALARY,
    MAX(SALARY) AS MAX_SALARY
FROM
    EMPLOYEES;    

-- Execute a Column Expression that retrieves all employees records with EMPID, SALARY and maximum salary as MAXSALARY in every row

SELECT
    EMP_ID,
    SALARY,
    (
    SELECT
        MAX(SALARY)
    FROM
        EMPLOYEES
) AS MAX_SALARY
FROM
    EMPLOYEES;
    
/* Execute a Table Expression for the EMPLOYEES table that excludes columns with sensitive employee data 
(i.e. does not include columns: SSN, B_DATE, SEX, ADDRESS, SALARY)*/

SELECT
    *
FROM
    (
    SELECT
        EMP_ID,
        F_NAME,
        L_NAME,
        DEP_ID
    FROM
        EMPLOYEES
) AS EMP4ALL;

-- Retrieve only the EMPLOYEES records that correspond to jobs in the JOBS table

SELECT
    *
FROM
    EMPLOYEES
WHERE
    JOB_ID IN(
SELECT
    JOB_IDENT
FROM
    JOBS
);

-- Retrieve only the list of employees whose JOB_TITLE is Jr. Designer

SELECT
    *
FROM
    EMPLOYEES
WHERE
    JOB_ID IN(
    SELECT
        JOB_IDENT
    FROM
        JOBS
    WHERE
        JOB_TITLE = 'Jr. Designer'
);

-- Retrieve JOB information and who earn more than $70,000

SELECT
    JOB_TITLE,
    MIN_SALARY,
    MAX_SALARY,
    JOB_IDENT
FROM
    JOBS
WHERE
    JOB_IDENT IN(
    SELECT
        JOB_ID
    FROM
        EMPLOYEES
    WHERE
        SALARY > 70000
);

-- Retrieve JOB information and list of employees whose birth year is after 1976

SELECT
    JOB_TITLE,
    MIN_SALARY,
    MAX_SALARY,
    JOB_IDENT
FROM
    JOBS
WHERE
    JOB_IDENT IN(
    SELECT
        JOB_ID
    FROM
        EMPLOYEES
    WHERE
        YEAR(B_DATE) > 1976
);
	
-- Retrieve JOB information and list of female employees whose birth year is after 1976

SELECT
    JOB_TITLE,
    MIN_SALARY,
    MAX_SALARY,
    JOB_IDENT
FROM
    JOBS
WHERE
    JOB_IDENT IN(
    SELECT
        JOB_ID
    FROM
        EMPLOYEES
    WHERE
        YEAR(B_DATE) > 1976 AND SEX = 'F'
);

-- Perform an implicit cartesian/cross join between EMPLOYEES and JOBS tables

SELECT
    *
FROM
    EMPLOYEES,
    JOBS;

-- Retrieve only the EMPLOYEES records that correspond to jobs in the JOBS table

SELECT
    *
FROM
    EMPLOYEES,
    JOBS
WHERE
    EMPLOYEES.JOB_ID = JOBS.JOB_IDENT;

-- Redo the previous query, using shorter aliases for table names

SELECT
    *
FROM
    EMPLOYEES E,
    JOBS J
WHERE
    E.JOB_ID = J.JOB_IDENT;

-- Redo the previous query, but retrieve only the Employee ID, Employee Name and Job Title

SELECT
    EMP_ID,
    F_NAME,
    L_NAME,
    JOB_TITLE
FROM
    EMPLOYEES E,
    JOBS J
WHERE
    E.JOB_ID = J.JOB_IDENT;

-- Redo the previous query, but specify the fully qualified column names with aliases in the SELECT clause

SELECT
    E.EMP_ID,
    E.F_NAME,
    E.L_NAME,
    J.JOB_TITLE
FROM
    EMPLOYEES E,
    JOBS J
WHERE
    E.JOB_ID = J.JOB_IDENT;

